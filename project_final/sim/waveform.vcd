$date
   Wed Mar 27 03:22:02 2024
$end
$version
  2021.2
$end
$timescale
  1ps
$end
$scope module rom2ram_tb $end
$var reg 1 ! clk $end
$var reg 1 " start $end
$var reg 1 # done $end
$var reg 1 $ reset $end
$var reg 1 % start_rom $end
$var reg 1 & start_dma $end
$var reg 16 ' data_amt [15:0] $end
$scope module rom2ram_dut $end
$var wire 1 ( clk $end
$var wire 1 ) reset $end
$var wire 1 * start $end
$var wire 1 + start_rom $end
$var wire 1 , start_dma $end
$var wire 16 - data_amt [15:0] $end
$var reg 1 # done $end
$var reg 4 . rom_address [3:0] $end
$var reg 8 / rom_data [7:0] $end
$var reg 4 0 nxt_rom_address [3:0] $end
$var reg 4 1 ram_address [3:0] $end
$var reg 8 2 ram_data [7:0] $end
$var reg 4 3 read_ram_address [3:0] $end
$var reg 4 4 nxt_read_ram_address [3:0] $end
$var reg 1 5 ram_wea $end
$var reg 1 6 read_ram_available $end
$var reg 1 7 ready_ram $end
$var reg 8 8 element_data [7:0] $end
$scope module rom_dut $end
$var wire 1 ( clk $end
$var wire 1 + start_rom $end
$var wire 4 9 rom_addr [3:0] $end
$var reg 8 / rom_data [7:0] $end
$upscope $end
$scope module dma_dut $end
$var wire 1 ( clk $end
$var wire 1 ) reset $end
$var wire 1 , start_dma $end
$var wire 16 - data_amt [15:0] $end
$var wire 8 : rom_data [7:0] $end
$var wire 4 ; rom_addr [3:0] $end
$var reg 4 1 ram_addr [3:0] $end
$var reg 8 2 ram_data [7:0] $end
$var reg 1 5 ram_wea $end
$upscope $end
$scope module simple_dualport_mem $end
$var wire 1 ( clk $end
$var wire 4 < addra [3:0] $end
$var wire 8 = dina [7:0] $end
$var wire 1 > wea $end
$var wire 4 ? addrb [3:0] $end
$var reg 8 8 doutb [7:0] $end
$var reg 1 6 read_ram_available $end
$upscope $end
$scope begin Block82_7 $end
$var reg 32 @ i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
0"
x#
0$
0%
0&
b10000 '
0(
0)
0*
0+
0,
b10000 -
bx .
bx /
bx 0
bx 1
bx 2
bx 3
bx 4
x5
x6
x7
bx 8
bx 9
bx :
bx ;
bx <
bx =
x>
bx ?
b0 @
$end
#5000
1!
1"
1%
1&
1(
1*
1+
1,
b0 .
b0 /
b1 0
b0 3
b1 4
bx 8
b0 9
b0 :
b0 ;
b0 ?
#10000
0!
0(
#15000
1!
1(
b1 .
b1 /
b10 0
b0 1
b0 2
15
06
bx 8
b1 9
b1 :
b1 ;
b0 <
b0 =
1>
#20000
0!
0(
#25000
1!
1(
b10 .
b10 /
b11 0
b1 1
b1 2
15
06
bx 8
b10 9
b10 :
b10 ;
b1 <
b1 =
#30000
0!
0(
#35000
1!
1(
b11 .
b11 /
b100 0
b10 1
b10 2
15
06
b0 8
b11 9
b11 :
b11 ;
b10 <
b10 =
#40000
0!
0(
#45000
1!
1(
b100 .
b100 /
b101 0
b11 1
b11 2
15
06
b0 8
b100 9
b100 :
b100 ;
b11 <
b11 =
#50000
0!
0(
#55000
1!
1(
b101 .
b101 /
b110 0
b100 1
b100 2
15
06
b0 8
b101 9
b101 :
b101 ;
b100 <
b100 =
#60000
0!
0(
#65000
1!
1(
b110 .
b110 /
b111 0
b101 1
b101 2
15
06
b0 8
b110 9
b110 :
b110 ;
b101 <
b101 =
#70000
0!
0(
#75000
1!
1(
b111 .
b111 /
b1000 0
b110 1
b110 2
15
06
b0 8
b111 9
b111 :
b111 ;
b110 <
b110 =
#80000
0!
0(
#85000
1!
1(
b1000 .
b1000 /
b1001 0
b111 1
b111 2
15
06
b0 8
b1000 9
b1000 :
b1000 ;
b111 <
b111 =
#90000
0!
0(
#95000
1!
1(
b1001 .
b1001 /
b1010 0
b1000 1
b1000 2
15
06
b0 8
b1001 9
b1001 :
b1001 ;
b1000 <
b1000 =
#100000
0!
0(
#105000
1!
1(
b1010 .
b1010 /
b1011 0
b1001 1
b1001 2
15
06
b0 8
b1010 9
b1010 :
b1010 ;
b1001 <
b1001 =
#110000
0!
0(
#115000
1!
1(
b1011 .
b1011 /
b1100 0
b1010 1
b1010 2
15
06
b0 8
b1011 9
b1011 :
b1011 ;
b1010 <
b1010 =
#120000
0!
0(
#125000
1!
1(
b1100 .
b1100 /
b1101 0
b1011 1
b1011 2
15
06
b0 8
b1100 9
b1100 :
b1100 ;
b1011 <
b1011 =
#130000
0!
0(
#135000
1!
1(
b1101 .
b1101 /
b1110 0
b1100 1
b1100 2
15
06
b0 8
b1101 9
b1101 :
b1101 ;
b1100 <
b1100 =
#140000
0!
0(
#145000
1!
1(
b1110 .
b1110 /
b1111 0
b1101 1
b1101 2
15
06
b0 8
b1110 9
b1110 :
b1110 ;
b1101 <
b1101 =
#150000
0!
0(
#155000
1!
1(
b1111 .
b1111 /
b0 0
b1110 1
b1110 2
15
06
b0 8
b1111 9
b1111 :
b1111 ;
b1110 <
b1110 =
#160000
0!
0(
#165000
1!
1(
b0 .
b0 /
b1 0
b1111 1
b1111 2
15
16
17
b0 8
b0 9
b0 :
b0 ;
b1111 <
b1111 =
#170000
0!
0(
#175000
1!
1(
b1 .
b1 /
b10 0
b0 1
b0 2
b1 3
b10 4
15
06
b0 8
b1 9
b1 :
b1 ;
b0 <
b0 =
b1 ?
#180000
0!
0(
#185000
1!
1(
b10 .
b10 /
b11 0
b1 1
b1 2
b10 3
b11 4
15
06
b1 8
b10 9
b10 :
b10 ;
b1 <
b1 =
b10 ?
#190000
0!
0(
#195000
1!
1(
b11 .
b11 /
b100 0
b10 1
b10 2
b11 3
b100 4
15
06
b10 8
b11 9
b11 :
b11 ;
b10 <
b10 =
b11 ?
#200000
0!
0(
#205000
1!
1(
b100 .
b100 /
b101 0
b11 1
b11 2
b100 3
b101 4
15
06
b11 8
b100 9
b100 :
b100 ;
b11 <
b11 =
b100 ?
#210000
0!
0(
#215000
1!
1(
b101 .
b101 /
b110 0
b100 1
b100 2
b101 3
b110 4
15
06
b100 8
b101 9
b101 :
b101 ;
b100 <
b100 =
b101 ?
#220000
0!
0(
#225000
1!
1(
b110 .
b110 /
b111 0
b101 1
b101 2
b110 3
b111 4
15
06
b101 8
b110 9
b110 :
b110 ;
b101 <
b101 =
b110 ?
#230000
0!
0(
#235000
1!
1(
b111 .
b111 /
b1000 0
b110 1
b110 2
b111 3
b1000 4
15
06
b110 8
b111 9
b111 :
b111 ;
b110 <
b110 =
b111 ?
#240000
0!
0(
#245000
1!
1(
b1000 .
b1000 /
b1001 0
b111 1
b111 2
b1000 3
b1001 4
15
06
b111 8
b1000 9
b1000 :
b1000 ;
b111 <
b111 =
b1000 ?
#250000
0!
0(
#255000
1!
1(
b1001 .
b1001 /
b1010 0
b1000 1
b1000 2
b1001 3
b1010 4
15
06
b1000 8
b1001 9
b1001 :
b1001 ;
b1000 <
b1000 =
b1001 ?
#260000
0!
0(
#265000
1!
1(
b1010 .
b1010 /
b1011 0
b1001 1
b1001 2
b1010 3
b1011 4
15
06
b1001 8
b1010 9
b1010 :
b1010 ;
b1001 <
b1001 =
b1010 ?
#270000
0!
0(
#275000
1!
1(
b1011 .
b1011 /
b1100 0
b1010 1
b1010 2
b1011 3
b1100 4
15
06
b1010 8
b1011 9
b1011 :
b1011 ;
b1010 <
b1010 =
b1011 ?
#280000
0!
0(
#285000
1!
1(
b1100 .
b1100 /
b1101 0
b1011 1
b1011 2
b1100 3
b1101 4
15
06
b1011 8
b1100 9
b1100 :
b1100 ;
b1011 <
b1011 =
b1100 ?
#290000
0!
0(
#295000
1!
1(
b1101 .
b1101 /
b1110 0
b1100 1
b1100 2
b1101 3
b1110 4
15
06
b1100 8
b1101 9
b1101 :
b1101 ;
b1100 <
b1100 =
b1101 ?
#300000
0!
0(
#305000
1!
1(
b1110 .
b1110 /
b1111 0
b1101 1
b1101 2
b1110 3
b1111 4
15
06
b1101 8
b1110 9
b1110 :
b1110 ;
b1101 <
b1101 =
b1110 ?
#310000
0!
0(
#315000
1!
1(
b1111 .
b1111 /
b0 0
b1110 1
b1110 2
b1111 3
b0 4
15
06
b1110 8
b1111 9
b1111 :
b1111 ;
b1110 <
b1110 =
b1111 ?
#320000
0!
0(
#325000
1!
1#
1(
b0 .
b0 /
b1 0
b1111 1
b1111 2
b0 3
b1 4
15
b1111 8
b0 9
b0 :
b0 ;
b1111 <
b1111 =
b0 ?
